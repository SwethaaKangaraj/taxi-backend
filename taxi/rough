import java.util.ArrayList;

public class BookingService {
    private ArrayList<Taxi> taxis;
    private ArrayList<Booking> bookings;
    boolean isFree;
    public BookingService(int numTaxis) {
        taxis = new ArrayList<Taxi>();
        for (int i = 1; i <= numTaxis; i++) {
            taxis.add(new Taxi(i, "A"));
        }
        bookings = new ArrayList<Booking>();
    }

    public String bookTaxi(int customerId, String pickupPoint, String dropPoint, int pickupTime) {
        Taxi taxi = getFreeTaxiAtPickupPoint(pickupPoint, pickupTime);
        if (taxi != null) {
            int distance = getDistance(pickupPoint,dropPoint);
            int dropTime =pickupTime+( Math.abs((int) pickupPoint.charAt(0) - (int) dropPoint.charAt(0)));
            double tAmount=calculateFare(distance);
            taxi.addEarnings(tAmount);
            Booking booking = new Booking(taxi.getId(), customerId, pickupPoint, dropPoint, pickupTime,dropTime,tAmount,taxi);
            booking.setTaxi(taxi);
            bookings.add(booking);
            taxi.setLocation(pickupPoint);
            return "Taxi can be allotted.\nTaxi-" + taxi.getId() + " is allotted";
        } else {
            return "Booking rejected";
        }
    }

    private Taxi getFreeTaxiAtPickupPoint(String pickupPoint, int pickupTime) {
        Taxi nearestTaxi=null;
        ArrayList<Taxi> freeTaxi = new ArrayList<>();
        for (Taxi taxi : taxis) {
                boolean isFree = true;
                for (Booking booking : bookings) {
                    System.out.println(booking.getId()+ "=="+ taxi.getId() +" " + pickupTime+">="+ booking.getPickupTime() +" "+ pickupTime+"<"+ booking.getDropTime());
                    if (booking.getTaxi() == taxi && pickupTime >= booking.getPickupTime() && pickupTime < booking.getDropTime()) {
                        isFree = false;
                        break;
                    }
                    else{
                        freeTaxi.add(taxi);
                    }
                }
                if (isFree) {
                    nearestTaxi= taxi;
                    break;
                     
                }
        }
        if(!freeTaxi.isEmpty()){
        int minDistance = Integer.MAX_VALUE;
         nearestTaxi = null;
        int count=0;
        for(int i = 0 ; i < freeTaxi.size() ; i++){
            Taxi taxi = freeTaxi.get(i);
             minDistance = getDistance(taxi.getLocation(), pickupPoint);
            for(int j = i+1 ; j < freeTaxi.size() ; j++){
                Taxi taxi1 = freeTaxi.get(j);
            int distance = getDistance(taxi1.getLocation(), pickupPoint);
                if (taxi.getLocation()==taxi1.getLocation()&&count==0) { 
                    count=1;
                  isFree = true;
                  if(taxi.getEarnings()<taxi1.getEarnings()){
                      taxi1=taxi;
                  }
                  else if(taxi.getEarnings()>taxi1.getEarnings()){
                      taxi = taxi1;
                  }
                  System.out.println(taxi.getId()+" "+taxi.getEarnings()+" " +taxi1.getId()+" "+taxi1.getEarnings());
                for (Booking booking : bookings) {
                    if (booking.getTaxi() == taxi1 && pickupTime >= booking.getPickupTime() && pickupTime < booking.getDropTime()) {
                         minDistance = distance;
                        isFree = false;
                         break;
                    }
                }
                if (isFree) {
                    minDistance = distance;
                    nearestTaxi = taxi1;
                    System.out.println(nearestTaxi.getId()+"====");
                }
            }
            else if (distance < minDistance) { 
                boolean isFree = true;
                for (Booking booking : bookings) {
                    if (booking.getTaxi() == taxi1 && pickupTime >= booking.getPickupTime() && pickupTime < booking.getDropTime()) {
                         minDistance = distance;
                        isFree = false;
                         break;
                    }
                }
                if (isFree) {
                    minDistance = distance;
                    nearestTaxi = taxi1;
                    System.out.println(nearestTaxi.getId()+"<-<-<");
                }
            }
                
            }
        }
    }
        return nearestTaxi;
    }
    
    

    private int getDistance(String location1, String location2) {
        return Math.abs(location1.charAt(0) - location2.charAt(0)) * 15;
    }

    public void displayTaxiDetails() {
        
        for (Taxi taxi : taxis) {
        System.out.println("Taxi-" + taxi.getId() + "\tTotal Earnings: Rs. " + taxi.getEarnings() + "\n");
        System.out.println("BookingID\tCustomerID\tFrom\tTo\tPickupTime\tDropTime\tAmount\n");
        for (Booking booking : bookings) {
        if (booking.getId() == taxi.getId()) {
        System.out.println(booking.getId() + "\t\t" + booking.getCustomerId() + "\t\t" + booking.getPickupPoint() + "\t" + booking.getDropPoint() + "\t\t" + booking.getPickupTime() + "\t\t" + booking.getDropTime() + "\t\tRs. " + booking.getAmount() + "\n");
        }
        }
        }
        
        }
        
        private double calculateFare(double distance) {
        double fare = 100.0; 
        distance -= 5.0; 
        if (distance > 0) {
            fare += distance * 10.0; 
        }
        return fare;
    }
}